name: Upload Release Asset

on:
  push

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Required to fetch all commits and tags
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
          registry-url: 'https://npm.pkg.github.com'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Dependencies
        run: yarn install
      - name: Build artifacts
        run: |
          VERSION_FILE_NAME=$GITHUB_REPOSITORY \
          VERSION_FILE_VERSION=$(git describe --tags --exclude=latest) \
          yarn build
      - name: Zip project
        run: |
          zip -r -j dist.zip dist/
      - name: Install GHR
        run: |
          curl --fail --silent --location --output ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
          tar -zxf ghr.tar.gz
          echo "./ghr_v0.13.0_linux_amd64" >> $GITHUB_PATH
      - name: Create release with asset
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          ghr -replace -delete -n ${GITHUB_REF:10} -c $GITHUB_SHA ${GITHUB_REF:10} dist.zip
      - name: Update latest release
        if: startsWith(github.ref, 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          ghr -prerelease -replace -delete -n Latest -c main latest dist.zip

      - name: Build artifacts for branch release
        run: |
          VERSION_FILE_NAME=$GITHUB_REPOSITORY \
          VERSION_FILE_VERSION=${{ github.ref_name }} \
          yarn build
      - name: Zip project
        run: |
          zip -r -j dist.zip dist/

      - name: Release branch
        if: startsWith(github.ref, "refs/heads/${{ github.ref_name }}")
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          ghr -prerelease -replace -delete -n "release-${{ github.ref_name }}" -c "${{ github.ref_name }}" "release-${{ github.ref_name }}" dist.zip
