"use strict";(globalThis.webpackChunk_danskernesdigitalebibliotek_dpl_react=globalThis.webpackChunk_danskernesdigitalebibliotek_dpl_react||[]).push([[7623],{"./src/apps/opening-hours-editor/OpeningHoursEditor.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,default:()=>OpeningHoursEditor_stories});var serviceUrlArgs=__webpack_require__("./src/core/storybook/serviceUrlArgs.ts"),react=__webpack_require__("./node_modules/react/index.js"),utils_text=__webpack_require__("./src/core/utils/text.tsx"),url=__webpack_require__("./src/core/utils/url.tsx"),dist=__webpack_require__("./node_modules/@fullcalendar/react/dist/index.js"),timegrid=__webpack_require__("./node_modules/@fullcalendar/timegrid/index.js"),daygrid=__webpack_require__("./node_modules/@fullcalendar/daygrid/index.js"),interaction=__webpack_require__("./node_modules/@fullcalendar/interaction/index.js"),da=__webpack_require__("./node_modules/@fullcalendar/core/locales/da.js"),reload_logo_black=__webpack_require__("./node_modules/@danskernesdigitalebibliotek/dpl-design-system/build/icons/logo/reload_logo_black.svg"),reload_logo_black_default=__webpack_require__.n(reload_logo_black),dayjs_min=__webpack_require__("./node_modules/dayjs/dayjs.min.js"),dayjs_min_default=__webpack_require__.n(dayjs_min);const DplOpeningHoursCreatePOSTOpeningHoursInstanceBodyRepetitionType_none="none",DplOpeningHoursCreatePOSTOpeningHoursInstanceBodyRepetitionType_weekly="weekly",DplOpeningHoursListGET200ItemRepetitionType_none="none",DplOpeningHoursListGET200ItemRepetitionType_weekly="weekly",formatDateTimeString=(date,time)=>`${date}T${time}:00`,formatFullCalendarEventToCmsEventEdit=event=>{if(!event.title||!event.backgroundColor)throw new Error("Invalid event format");const startDate=dayjs_min_default()(event.startStr),endDate=dayjs_min_default()(event.endStr);return{id:Number(event.id),category:{title:event.title,color:event.backgroundColor},date:startDate.format("YYYY-MM-DD"),start_time:startDate.format("HH:mm"),end_time:endDate.format("HH:mm"),repetition:event.repetition,branch_id:0}},formatDateStr=date=>dayjs_min_default()(date).format("YYYY-MM-DDTHH:mm:ssZ"),adjustEndDateBasedOnStartDate=(startDay,endDay)=>{const start=dayjs_min_default()(startDay),end=dayjs_min_default()(endDay);return start.isSame(end,"day")?endDay:start.hour(end.hour()).minute(end.minute()).second(end.second()).toDate()},extractTime=date=>dayjs_min_default()(date).format("HH:mm"),updateDateTime=(date,timeStr)=>{const[hours,minutes]=timeStr.split(":").map(Number);return dayjs_min_default()(date).hour(hours).minute(minutes).toDate()},getWeekDayName=date=>dayjs_min_default()(date).format("dddd"),getDateString=date=>dayjs_min_default()(date).format("DD-MM-YYYY"),getStringForDateInput=date=>dayjs_min_default()(date).format("YYYY-MM-DD"),isOpeningHourWeeklyRepetition=event=>{var _event$extendedProps,_event$extendedProps$,_event$event$extended,_event$event$extended2;return"event"in event?(null===(_event$event$extended=event.event.extendedProps)||void 0===_event$event$extended||null===(_event$event$extended2=_event$event$extended.repetition)||void 0===_event$event$extended2?void 0:_event$event$extended2.type)===DplOpeningHoursListGET200ItemRepetitionType_weekly:(null===(_event$extendedProps=event.extendedProps)||void 0===_event$extendedProps||null===(_event$extendedProps$=_event$extendedProps.repetition)||void 0===_event$extendedProps$?void 0:_event$extendedProps$.type)===DplOpeningHoursListGET200ItemRepetitionType_weekly},OpeningHoursEditorEventContent=({eventInput,iconAltText})=>{const{event}=eventInput;return react.createElement("div",{className:"opening-hours-editor-event-content","data-cy":"opening-hours-editor-event-content"},react.createElement("div",null,react.createElement("b",null,event.title),react.createElement("div",null,extractTime(event.start)," - ",extractTime(event.end))),isOpeningHourWeeklyRepetition(event)&&react.createElement("div",{className:"opening-hours-editor-event-content__series-icon"},react.createElement("img",{src:reload_logo_black_default(),alt:iconAltText})))},opening_hours_editor_OpeningHoursEditorEventContent=OpeningHoursEditorEventContent;try{OpeningHoursEditorEventContent.displayName="OpeningHoursEditorEventContent",OpeningHoursEditorEventContent.__docgenInfo={description:"",displayName:"OpeningHoursEditorEventContent",props:{eventInput:{defaultValue:null,description:"",name:"eventInput",required:!0,type:{name:"EventInput"}},iconAltText:{defaultValue:null,description:"",name:"iconAltText",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/OpeningHoursEditorEventContent.tsx#OpeningHoursEditorEventContent"]={docgenInfo:OpeningHoursEditorEventContent.__docgenInfo,name:"OpeningHoursEditorEventContent",path:"src/apps/opening-hours-editor/OpeningHoursEditorEventContent.tsx#OpeningHoursEditorEventContent"})}catch(__react_docgen_typescript_loader_error){}var es=__webpack_require__("./node_modules/react-query/es/index.js"),dpl_cms=__webpack_require__("./src/core/dpl-cms/dpl-cms.ts"),utils_config=__webpack_require__("./src/core/utils/config.tsx");const opening_hours_editor_useOpeningHoursEditor=()=>{const openingHoursBranchId=(0,utils_config.UK)()("openingHoursBranchIdConfig",{transformer:"stringToNumber"}),[datesSet,setDatseSet]=(0,react.useState)(null),queryClient=(0,es.useQueryClient)(),{data:openingHoursData}=(0,dpl_cms.Dp)({branch_id:openingHoursBranchId,...datesSet&&{from_date:getStringForDateInput(datesSet.start),to_date:getStringForDateInput(datesSet.end)}},{enabled:!!datesSet}),{mutate:removeOpeningHours}=(0,dpl_cms.v2)(),{mutate:createOpeningHours}=(0,dpl_cms.hi)(),{mutate:updateOpeningHours}=(0,dpl_cms.I1)(),[events,setEvents]=(0,react.useState)([]);(0,react.useEffect)((()=>{if(openingHoursData){const formattedEvents=openingHoursData.map((({category,date,start_time,end_time,id,repetition})=>({id:id.toString(),title:category.title,start:formatDateTimeString(date,start_time),end:formatDateTimeString(date,end_time),color:category.color,repetition})));setEvents(formattedEvents)}}),[openingHoursData]);const onSuccess=()=>{queryClient.invalidateQueries((0,dpl_cms.J0)({branch_id:openingHoursBranchId}))},onError=message=>{alert(message),window.location.reload()};return{events,handleEventAdd:event=>{createOpeningHours({data:{...event,branch_id:openingHoursBranchId},params:{_format:"json"}},{onSuccess:()=>{onSuccess()},onError:()=>{onError("Failed to create opening hours")}})},handleEventRemove:({eventId,repetition_id})=>{removeOpeningHours({id:eventId,params:{_format:"json",...repetition_id?{repetition_id}:{}}},{onSuccess:()=>{onSuccess()},onError:()=>{onError("Failed to remove opening hours")}})},handleEventEditing:event=>{updateOpeningHours({id:event.id.toString(),data:{...event,branch_id:openingHoursBranchId},params:{_format:"json"}},{onSuccess:()=>{onSuccess()},onError:()=>{onError("Failed to update opening hours")}})},handleDatesSet:datesInView=>{setDatseSet(datesInView)}}},EventForm=({initialTitle,startDate,endDate,onSubmit,openingHoursCategories,children,isRepeatedOpeningHour})=>{const t=(0,utils_text.F)(),initialCategory=initialTitle?openingHoursCategories.find((category=>category.title===initialTitle)):openingHoursCategories[0],initialStartTime=extractTime(startDate),initialEndTime=extractTime(endDate),weekDayName=getWeekDayName(startDate),startDateString=getDateString(startDate),[startTime,setStartTime]=(0,react.useState)(initialStartTime),[endTime,setEndTime]=(0,react.useState)(initialEndTime),[category,setCategory]=(0,react.useState)(initialCategory),isSameTime=startTime===endTime,[isRepeated,setIsRepeated]=(0,react.useState)(!1),[repeatedEndDate,setRepeatedEndDate]=(0,react.useState)(null);(0,react.useEffect)((()=>{setCategory(initialCategory),setStartTime(initialStartTime),setEndTime(initialEndTime),setIsRepeated(!1),setRepeatedEndDate(null)}),[initialCategory,initialEndTime,initialStartTime]),(0,react.useEffect)((()=>{isRepeated||setRepeatedEndDate(null)}),[isRepeated]);return react.createElement("form",{onSubmit:e=>{e.preventDefault(),category&&onSubmit({category,startTime,endTime,startDate,repeatedEndDate})},className:"opening-hours-editor-form","data-cy":"opening-hours-editor-form"},react.createElement("label",{className:"opening-hours-editor-form__label",htmlFor:"event-form-title"},t("openingHoursEventFormCategoryText")),react.createElement("select",{"data-cy":"opening-hours-editor-form-select",className:"opening-hours-editor-form__select",id:"event-form-title",value:null==category?void 0:category.title,onChange:e=>{setCategory(openingHoursCategories.find((item=>item.title===e.target.value)))}},openingHoursCategories.map((categoryItem=>react.createElement("option",{key:categoryItem.title,value:categoryItem.title},categoryItem.title)))),react.createElement("label",{className:"opening-hours-editor-form__label",htmlFor:"event-form-start-time"},t("openingHoursEventFormStartTimeText")),react.createElement("input",{"data-cy":"opening-hours-editor-form-start-time",className:"opening-hours-editor-form__time-input",id:"event-form-start-time",type:"time",value:startTime,onChange:e=>setStartTime(e.target.value)}),react.createElement("label",{className:"opening-hours-editor-form__label",htmlFor:"event-form-end-time"},t("openingHoursEventFormEndTimeText")),react.createElement("input",{"data-cy":"opening-hours-editor-form-end-time",className:"opening-hours-editor-form__time-input",id:"event-form-end-time",type:"time",value:endTime,onChange:e=>setEndTime(e.target.value),min:startTime,max:"00:00"}),isRepeatedOpeningHour&&react.createElement(react.Fragment,null,react.createElement("div",{className:"opening-hours-editor-form__checkbox"},react.createElement("input",{id:"event-form-repeated","data-cy":"opening-hours-editor-form-repeated",type:"checkbox",checked:isRepeated,onChange:e=>setIsRepeated(e.target.checked)}),react.createElement("label",{className:"opening-hours-editor-form__label",htmlFor:"event-form-repeated"},t("openingHoursEventFormRepeatedText",{placeholders:{"@startDate":startDateString,"@weekDayName":weekDayName}}))),react.createElement("label",{className:"opening-hours-editor-form__label",htmlFor:"event-form-end-date"},t("openingHoursEventFormEndDateText")),react.createElement("input",{"data-cy":"opening-hours-editor-form-end-date",type:"date",className:"opening-hours-editor-form__time-input",id:"event-form-end-date",min:getStringForDateInput(startDate),disabled:!isRepeated,required:isRepeated,value:repeatedEndDate||"",onChange:e=>setRepeatedEndDate(e.target.value)})),react.createElement("button",{"data-cy":"opening-hours-editor-form-submit",type:"submit",className:"opening-hours-editor-form__submit",disabled:isSameTime},t("openingHoursEventFormSubmitText")),children)},opening_hours_editor_EventForm=EventForm;try{EventForm.displayName="EventForm",EventForm.__docgenInfo={description:"",displayName:"EventForm",props:{initialTitle:{defaultValue:null,description:"",name:"initialTitle",required:!1,type:{name:"string | undefined"}},startDate:{defaultValue:null,description:"",name:"startDate",required:!0,type:{name:"Date"}},endDate:{defaultValue:null,description:"",name:"endDate",required:!0,type:{name:"Date"}},onSubmit:{defaultValue:null,description:"",name:"onSubmit",required:!0,type:{name:"(EventFormOnSubmitType: EventFormOnSubmitType) => void"}},openingHoursCategories:{defaultValue:null,description:"",name:"openingHoursCategories",required:!0,type:{name:"OpeningHoursCategoriesType[]"}},isRepeatedOpeningHour:{defaultValue:null,description:"",name:"isRepeatedOpeningHour",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/EventForm.tsx#EventForm"]={docgenInfo:EventForm.__docgenInfo,name:"EventForm",path:"src/apps/opening-hours-editor/EventForm.tsx#EventForm"})}catch(__react_docgen_typescript_loader_error){}var useDialog=__webpack_require__("./src/components/dialog/useDialog.tsx"),Dialog=__webpack_require__("./src/components/dialog/Dialog.tsx"),OptionValue=function(OptionValue){return OptionValue.This="This",OptionValue.All="All",OptionValue}(OptionValue||{});const ConfirmEditRepeatedOpeningHour=({confirmSubmit,closeDialog,title})=>{const t=(0,utils_text.F)(),options=[{value:OptionValue.This,label:t("openingHoursEditEventConfirmOptionThisText"),cy:"opening-hours-editor-form__radio-this"},{value:OptionValue.All,label:t("openingHoursEditEventConfirmOptionAllText"),cy:"opening-hours-editor-form__radio-all"}],[selectedOption,setSelectedOption]=(0,react.useState)(options[0].value),handleRadioChange=event=>{event.target.value!==OptionValue.This&&event.target.value!==OptionValue.All||setSelectedOption(event.target.value)};return react.createElement("form",{className:"opening-hours-editor-form"},react.createElement("h2",{className:"opening-hours-editor-form__label"},title),options.map((({value,label,cy})=>react.createElement("div",{className:"opening-hours-editor-form__radio",key:value},react.createElement("input",{"data-cy":cy,type:"radio",id:value,value,checked:selectedOption===value,onChange:handleRadioChange}),react.createElement("label",{htmlFor:value},label)))),react.createElement("button",{className:"opening-hours-editor-form__cancel","data-cy":"opening-hours-editor-form__cancel",type:"button",onClick:()=>{closeDialog(),setSelectedOption(options[0].value)}},t("openingHoursConfirmAddRepeatedCancelText")),react.createElement("button",{className:"opening-hours-editor-form__submit","data-cy":"opening-hours-editor-form__confirm",type:"button",onClick:e=>{e.preventDefault(),confirmSubmit(selectedOption===OptionValue.All),setSelectedOption(options[0].value)}},t("openingHoursConfirmRepeatedSubmitText")))},opening_hours_editor_ConfirmEditRepeatedOpeningHour=ConfirmEditRepeatedOpeningHour;try{ConfirmEditRepeatedOpeningHour.displayName="ConfirmEditRepeatedOpeningHour",ConfirmEditRepeatedOpeningHour.__docgenInfo={description:"",displayName:"ConfirmEditRepeatedOpeningHour",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}},confirmSubmit:{defaultValue:null,description:"",name:"confirmSubmit",required:!0,type:{name:"(editSerie: boolean) => void"}},closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/ConfirmEditRepeatedOpeningHour.tsx#ConfirmEditRepeatedOpeningHour"]={docgenInfo:ConfirmEditRepeatedOpeningHour.__docgenInfo,name:"ConfirmEditRepeatedOpeningHour",path:"src/apps/opening-hours-editor/ConfirmEditRepeatedOpeningHour.tsx#ConfirmEditRepeatedOpeningHour"})}catch(__react_docgen_typescript_loader_error){}const DialogFormEdit=({eventInfo,handleEventEditing,closeDialog:closeEditDialog,handleEventRemove,openingHoursCategories})=>{const t=(0,utils_text.F)(),{dialogContent,openDialogWithContent,closeDialog,dialogRef}=(0,useDialog.A)();if(!eventInfo.start||!eventInfo.end)return alert(t("openingHoursInvalidEventText")),null;const handleEventRemoveConfirm=editSerie=>{handleEventRemove({eventId:eventInfo.id,...editSerie?{repetition_id:eventInfo.extendedProps.repetition.id}:{}}),eventInfo.remove(),closeDialog(),closeEditDialog()};return react.createElement(react.Fragment,null,react.createElement(opening_hours_editor_EventForm,{initialTitle:eventInfo.title,startDate:eventInfo.start,endDate:eventInfo.end,onSubmit:({category,startTime,endTime})=>{if(!eventInfo.start||!eventInfo.end)return void alert(t("openingHoursInvalidEventText"));const startDate=updateDateTime(eventInfo.start,startTime);let endDate=updateDateTime(eventInfo.end,endTime);endDate=adjustEndDateBasedOnStartDate(startDate,endDate),eventInfo.setProp("title",category.title),eventInfo.setProp("color",category.color),eventInfo.setDates(startDate,endDate);const cmsEvent={id:eventInfo.id,category,title:eventInfo.title,backgroundColor:eventInfo.backgroundColor,startStr:eventInfo.startStr,endStr:eventInfo.endStr,repetition:{type:DplOpeningHoursListGET200ItemRepetitionType_none}},handleEventEditConfirm=editSerie=>{editSerie?(handleEventEditing(formatFullCalendarEventToCmsEventEdit({...cmsEvent,repetition:{type:DplOpeningHoursListGET200ItemRepetitionType_weekly,weekly_data:{end_date:eventInfo.extendedProps.repetition.weekly_data.end_date}}})),closeDialog(),closeEditDialog()):(handleEventEditing(formatFullCalendarEventToCmsEventEdit(cmsEvent)),closeDialog(),closeEditDialog())};isOpeningHourWeeklyRepetition(eventInfo)?openDialogWithContent(react.createElement(opening_hours_editor_ConfirmEditRepeatedOpeningHour,{title:t("openingHoursEditEventTitleText"),confirmSubmit:handleEventEditConfirm,closeDialog})):(handleEventEditing(formatFullCalendarEventToCmsEventEdit(cmsEvent)),closeEditDialog())},openingHoursCategories},react.createElement("button",{"data-cy":"opening-hours-editor-form__remove",className:"opening-hours-editor-form__remove",type:"button",onClick:()=>{isOpeningHourWeeklyRepetition(eventInfo)?openDialogWithContent(react.createElement(opening_hours_editor_ConfirmEditRepeatedOpeningHour,{title:t("openingHoursRemoveEventTitleText"),confirmSubmit:handleEventRemoveConfirm,closeDialog})):handleEventRemoveConfirm(!1)}},t("openingHoursRemoveEventButtonText"))),react.createElement(Dialog.A,{closeDialog,ref:dialogRef},dialogContent))},opening_hours_editor_DialogFormEdit=DialogFormEdit;try{DialogFormEdit.displayName="DialogFormEdit",DialogFormEdit.__docgenInfo={description:"",displayName:"DialogFormEdit",props:{eventInfo:{defaultValue:null,description:"",name:"eventInfo",required:!0,type:{name:"EventImpl"}},handleEventEditing:{defaultValue:null,description:"",name:"handleEventEditing",required:!0,type:{name:"(event: DplOpeningHoursUpdatePATCH200Item) => void"}},closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}},handleEventRemove:{defaultValue:null,description:"",name:"handleEventRemove",required:!0,type:{name:"({ eventId, repetition_id }: HandleEventRemoveType) => void"}},openingHoursCategories:{defaultValue:null,description:"",name:"openingHoursCategories",required:!0,type:{name:"OpeningHoursCategoriesType[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/DialogFormEdit.tsx#DialogFormEdit"]={docgenInfo:DialogFormEdit.__docgenInfo,name:"DialogFormEdit",path:"src/apps/opening-hours-editor/DialogFormEdit.tsx#DialogFormEdit"})}catch(__react_docgen_typescript_loader_error){}const ConfirmAddRepeatedOpeningHour=({startDate,category,startTime,endTime,repeatedEndDate,confirmSubmit,closeDialog})=>{const t=(0,utils_text.F)();return react.createElement("div",{className:"opening-hours-editor-form","data-cy":"opening-hours-editor-confirm-add-repeated-form"},react.createElement("h2",{className:"opening-hours-editor-form__label"},t("openingHoursConfirmAddRepeatedText")),react.createElement("table",{className:"opening-hours-editor-form__table","data-cy":"opening-hours-editor-form__table"},react.createElement("tbody",null,react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormCategoryText"),":"),react.createElement("td",null,category.title)),react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormStartTimeText"),":"),react.createElement("td",null,startTime)),react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormEndTimeText"),":"),react.createElement("td",null,endTime)),react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormStartDateText"),":"),react.createElement("td",null,getDateString(startDate))),react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormEndDateText"),":"),react.createElement("td",null,getDateString(repeatedEndDate))),react.createElement("tr",null,react.createElement("td",null,t("openingHoursEventFormEveryWeekdayText"),":"),react.createElement("td",null,getWeekDayName(startDate))))),react.createElement("button",{"data-cy":"opening-hours-editor-form__cancel",type:"button",className:"opening-hours-editor-form__cancel",onClick:closeDialog},t("openingHoursConfirmAddRepeatedCancelText")),react.createElement("button",{"data-cy":"opening-hours-editor-form__confirm",type:"button",className:"opening-hours-editor-form__submit",onClick:()=>{confirmSubmit(),closeDialog()}},t("openingHoursConfirmRepeatedSubmitText")))},opening_hours_editor_ConfirmAddRepeatedOpeningHour=ConfirmAddRepeatedOpeningHour;try{ConfirmAddRepeatedOpeningHour.displayName="ConfirmAddRepeatedOpeningHour",ConfirmAddRepeatedOpeningHour.__docgenInfo={description:"",displayName:"ConfirmAddRepeatedOpeningHour",props:{startDate:{defaultValue:null,description:"",name:"startDate",required:!0,type:{name:"Date"}},category:{defaultValue:null,description:"",name:"category",required:!0,type:{name:"OpeningHoursCategoriesType"}},startTime:{defaultValue:null,description:"",name:"startTime",required:!0,type:{name:"string"}},endTime:{defaultValue:null,description:"",name:"endTime",required:!0,type:{name:"string"}},repeatedEndDate:{defaultValue:null,description:"",name:"repeatedEndDate",required:!0,type:{name:"Date"}},confirmSubmit:{defaultValue:null,description:"",name:"confirmSubmit",required:!0,type:{name:"() => void"}},closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/ConfirmAddRepeatedOpeningHour.tsx#ConfirmAddRepeatedOpeningHour"]={docgenInfo:ConfirmAddRepeatedOpeningHour.__docgenInfo,name:"ConfirmAddRepeatedOpeningHour",path:"src/apps/opening-hours-editor/ConfirmAddRepeatedOpeningHour.tsx#ConfirmAddRepeatedOpeningHour"})}catch(__react_docgen_typescript_loader_error){}const DialogFormAdd=({selectedEventInfo,handleEventAdd,closeDialog:closeAddDialog,openingHoursCategories})=>{const{dialogContent,openDialogWithContent,closeDialog,dialogRef}=(0,useDialog.A)(),calendarApi=selectedEventInfo.view.calendar,isDayGridMonth="dayGridMonth"===selectedEventInfo.view.type,isTimeGridWeek="timeGridWeek"===selectedEventInfo.view.type;return react.createElement(react.Fragment,null,react.createElement(opening_hours_editor_EventForm,{openingHoursCategories,startDate:selectedEventInfo.start,endDate:selectedEventInfo.end,onSubmit:({category,startTime,endTime,startDate,repeatedEndDate})=>{const start=updateDateTime(selectedEventInfo.start,startTime),startStr=formatDateStr(start);let end=updateDateTime(selectedEventInfo.end,endTime),{endStr}=selectedEventInfo;if(isTimeGridWeek){const adjustedEnd=((startDay,endDay)=>{let adjustedEndDay;const start=dayjs_min_default()(startDay),end=dayjs_min_default()(endDay);return adjustedEndDay=start.isSame(end,"day")?end:start.add(1,"day").startOf("day"),{end:adjustedEndDay.toDate(),endStr:formatDateStr(adjustedEndDay.toDate())}})(start,end);end=adjustedEnd.end,endStr=adjustedEnd.endStr}if(isDayGridMonth){const adjustedEnd=((startDay,endDay)=>{const adjustedEndDay=adjustEndDateBasedOnStartDate(startDay,endDay);return{end:adjustedEndDay,endStr:formatDateStr(adjustedEndDay)}})(start,end);end=adjustedEnd.end,endStr=adjustedEnd.endStr}const newFullCalenderEvent={...selectedEventInfo,start,startStr,end,endStr,title:category.title,color:category.color,allDay:!1};calendarApi.addEvent(newFullCalenderEvent),calendarApi.unselect();const cmsEvent=(event=>{if(!event.title||!event.color)throw new Error("Invalid event format");const startDate=dayjs_min_default()(event.startStr),endDate=dayjs_min_default()(event.endStr);return{id:Number(event.id),category:{title:event.title,color:event.color},date:startDate.format("YYYY-MM-DD"),start_time:startDate.format("HH:mm"),end_time:endDate.format("HH:mm"),repetition:event.repetition,branch_id:0}})({...newFullCalenderEvent,repetition:{type:repeatedEndDate?DplOpeningHoursCreatePOSTOpeningHoursInstanceBodyRepetitionType_weekly:DplOpeningHoursCreatePOSTOpeningHoursInstanceBodyRepetitionType_none,...repeatedEndDate?{weekly_data:{end_date:repeatedEndDate}}:{}}});repeatedEndDate?openDialogWithContent(react.createElement(opening_hours_editor_ConfirmAddRepeatedOpeningHour,{startDate,category,startTime,endTime,repeatedEndDate:new Date(repeatedEndDate),confirmSubmit:()=>{handleEventAdd(cmsEvent),closeAddDialog()},closeDialog})):(handleEventAdd(cmsEvent),closeAddDialog())},isRepeatedOpeningHour:!0}),react.createElement(Dialog.A,{closeDialog,ref:dialogRef},dialogContent))},opening_hours_editor_DialogFormAdd=DialogFormAdd;try{DialogFormAdd.displayName="DialogFormAdd",DialogFormAdd.__docgenInfo={description:"",displayName:"DialogFormAdd",props:{selectedEventInfo:{defaultValue:null,description:"",name:"selectedEventInfo",required:!0,type:{name:"DateSelectArg"}},handleEventAdd:{defaultValue:null,description:"",name:"handleEventAdd",required:!0,type:{name:"(event: DplOpeningHoursCreatePOSTOpeningHoursInstanceBody) => void"}},closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}},openingHoursCategories:{defaultValue:null,description:"",name:"openingHoursCategories",required:!0,type:{name:"OpeningHoursCategoriesType[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/DialogFormAdd.tsx#DialogFormAdd"]={docgenInfo:DialogFormAdd.__docgenInfo,name:"DialogFormAdd",path:"src/apps/opening-hours-editor/DialogFormAdd.tsx#DialogFormAdd"})}catch(__react_docgen_typescript_loader_error){}const OpeningHoursEditor=({initialDate})=>{var _fullCalendarRef$curr;const iconAltText=(0,utils_text.F)()("openingHoursRepeatedIconAltText"),openingHoursCategories=(0,utils_config.UK)()("openingHoursEditorCategoriesConfig",{transformer:"jsonParse"}),fullCalendarRef=react.useRef(null),fullCalendarApi=null===(_fullCalendarRef$curr=fullCalendarRef.current)||void 0===_fullCalendarRef$curr?void 0:_fullCalendarRef$curr.getApi(),{events,handleEventAdd,handleEventEditing,handleEventRemove,handleDatesSet}=opening_hours_editor_useOpeningHoursEditor(),{dialogContent,openDialogWithContent,closeDialog,dialogRef}=(0,useDialog.A)({onClose:()=>{fullCalendarApi&&fullCalendarApi.unselect()}});return react.createElement(react.Fragment,null,react.createElement(Dialog.A,{closeDialog,ref:dialogRef},dialogContent),react.createElement(dist.A,{initialDate:initialDate??void 0,ref:fullCalendarRef,plugins:[daygrid.A,timegrid.A,interaction.Ay],headerToolbar:{left:"dayGridMonth,timeGridWeek",center:"title",right:"prev,next today"},initialView:"timeGridWeek",locale:da.A,selectable:!0,select:selectedEventInfo=>openDialogWithContent(react.createElement(opening_hours_editor_DialogFormAdd,{selectedEventInfo,handleEventAdd,openingHoursCategories,closeDialog})),unselectAuto:!1,eventClick:clickInfo=>openDialogWithContent(react.createElement(opening_hours_editor_DialogFormEdit,{eventInfo:clickInfo.event,handleEventEditing,handleEventRemove,openingHoursCategories,closeDialog})),eventContent:eventInput=>opening_hours_editor_OpeningHoursEditorEventContent({eventInput,iconAltText}),events,stickyHeaderDates:!0,height:"auto",selectMirror:!0,allDaySlot:!1,datesSet:handleDatesSet}))},opening_hours_editor_OpeningHoursEditor=OpeningHoursEditor;try{OpeningHoursEditor.displayName="OpeningHoursEditor",OpeningHoursEditor.__docgenInfo={description:"",displayName:"OpeningHoursEditor",props:{initialDate:{defaultValue:null,description:"",name:"initialDate",required:!1,type:{name:"Date | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/OpeningHoursEditor.tsx#OpeningHoursEditor"]={docgenInfo:OpeningHoursEditor.__docgenInfo,name:"OpeningHoursEditor",path:"src/apps/opening-hours-editor/OpeningHoursEditor.tsx#OpeningHoursEditor"})}catch(__react_docgen_typescript_loader_error){}const OpeningHoursEditor_entry=(0,utils_config.NV)((0,url.nU)((0,utils_text.i)((({initialDate=new Date})=>react.createElement(opening_hours_editor_OpeningHoursEditor,{initialDate})))));try{OpeningHoursEditorentry.displayName="OpeningHoursEditorentry",OpeningHoursEditorentry.__docgenInfo={description:"",displayName:"OpeningHoursEditorentry",props:{openingHoursRemoveEventButtonText:{defaultValue:null,description:"",name:"openingHoursRemoveEventButtonText",required:!0,type:{name:"string"}},openingHoursInvalidEventText:{defaultValue:null,description:"",name:"openingHoursInvalidEventText",required:!0,type:{name:"string"}},openingHoursEventFormCategoryText:{defaultValue:null,description:"",name:"openingHoursEventFormCategoryText",required:!0,type:{name:"string"}},openingHoursEventFormStartTimeText:{defaultValue:null,description:"",name:"openingHoursEventFormStartTimeText",required:!0,type:{name:"string"}},openingHoursEventFormEndTimeText:{defaultValue:null,description:"",name:"openingHoursEventFormEndTimeText",required:!0,type:{name:"string"}},openingHoursEventFormSubmitText:{defaultValue:null,description:"",name:"openingHoursEventFormSubmitText",required:!0,type:{name:"string"}},openingHoursEventFormRepeatedText:{defaultValue:null,description:"",name:"openingHoursEventFormRepeatedText",required:!0,type:{name:"string"}},openingHoursEventFormEndDateText:{defaultValue:null,description:"",name:"openingHoursEventFormEndDateText",required:!0,type:{name:"string"}},openingHoursEventFormEveryWeekdayText:{defaultValue:null,description:"",name:"openingHoursEventFormEveryWeekdayText",required:!0,type:{name:"string"}},openingHoursEventFormStartDateText:{defaultValue:null,description:"",name:"openingHoursEventFormStartDateText",required:!0,type:{name:"string"}},openingHoursConfirmAddRepeatedText:{defaultValue:null,description:"",name:"openingHoursConfirmAddRepeatedText",required:!0,type:{name:"string"}},openingHoursConfirmAddRepeatedCancelText:{defaultValue:null,description:"",name:"openingHoursConfirmAddRepeatedCancelText",required:!0,type:{name:"string"}},openingHoursConfirmRepeatedSubmitText:{defaultValue:null,description:"",name:"openingHoursConfirmRepeatedSubmitText",required:!0,type:{name:"string"}},openingHoursRepeatedIconAltText:{defaultValue:null,description:"",name:"openingHoursRepeatedIconAltText",required:!0,type:{name:"string"}},openingHoursEditEventConfirmOptionThisText:{defaultValue:null,description:"",name:"openingHoursEditEventConfirmOptionThisText",required:!0,type:{name:"string"}},openingHoursEditEventConfirmOptionAllText:{defaultValue:null,description:"",name:"openingHoursEditEventConfirmOptionAllText",required:!0,type:{name:"string"}},openingHoursRemoveEventTitleText:{defaultValue:null,description:"",name:"openingHoursRemoveEventTitleText",required:!0,type:{name:"string"}},openingHoursEditEventTitleText:{defaultValue:null,description:"",name:"openingHoursEditEventTitleText",required:!0,type:{name:"string"}},initialDate:{defaultValue:{value:"new Date()"},description:"",name:"initialDate",required:!1,type:{name:"Date | undefined"}},openingHoursEditorCategoriesConfig:{defaultValue:null,description:"",name:"openingHoursEditorCategoriesConfig",required:!0,type:{name:"string"}},openingHoursBranchIdConfig:{defaultValue:null,description:"",name:"openingHoursBranchIdConfig",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/apps/opening-hours-editor/OpeningHoursEditor.entry.tsx#OpeningHoursEditorentry"]={docgenInfo:OpeningHoursEditorentry.__docgenInfo,name:"OpeningHoursEditorentry",path:"src/apps/opening-hours-editor/OpeningHoursEditor.entry.tsx#OpeningHoursEditorentry"})}catch(__react_docgen_typescript_loader_error){}const OpeningHoursEditor_stories={title:"Apps / Opening Hours Editor",component:OpeningHoursEditor_entry,argTypes:{...serviceUrlArgs.U,openingHoursRemoveEventButtonText:{description:"Opening hours remove event button",control:{type:"text"}},openingHoursInvalidEventText:{description:"Opening hours invalid event text",control:{type:"text"}},openingHoursEditorCategoriesConfig:{description:"Opening hours categories",control:{type:"text"}},openingHoursBranchIdConfig:{description:"Opening hours branch id",control:{type:"text"}},initialDate:{description:"Initial date to show",control:{type:"date"}},openingHoursEventFormCategoryText:{description:"Opening hours event form category",control:{type:"text"}},openingHoursEventFormStartTimeText:{description:"Opening hours event form start time",control:{type:"text"}},openingHoursEventFormEndTimeText:{description:"Opening hours event form end time",control:{type:"text"}},openingHoursEventFormSubmitText:{description:"Opening hours event form submit",control:{type:"text"}},openingHoursEventFormRepeatedText:{description:"Opening hours event form repeated",control:{type:"text"}},openingHoursEventFormEndDateText:{description:"Opening hours event to end date",control:{type:"text"}},openingHoursEventFormStartDateText:{description:"Opening hours event form start date",control:{type:"text"}},openingHoursEventFormEveryWeekdayText:{description:"Opening hours event form every weekday",control:{type:"text"}},openingHoursConfirmAddRepeatedText:{description:"Opening hours confirm add repeated",control:{type:"text"}},openingHoursConfirmAddRepeatedCancelText:{description:"Opening hours confirm add repeated cancel",control:{type:"text"}},openingHoursConfirmRepeatedSubmitText:{description:"Opening hours confirm add repeated submit",control:{type:"text"}},openingHoursRepeatedIconAltText:{description:"Opening hours repeated icon alt text",control:{type:"text"}},openingHoursEditEventConfirmOptionThisText:{description:"Opening hours remove event confirm option this",control:{type:"text"}},openingHoursEditEventConfirmOptionAllText:{description:"Opening hours remove event confirm option all",control:{type:"text"}},openingHoursRemoveEventTitleText:{description:"Opening hours remove event title",control:{type:"text"}},openingHoursEditEventTitleText:{description:"Opening hours edit event title",control:{type:"text"}}}},Primary={args:{...serviceUrlArgs.A,openingHoursRemoveEventButtonText:"Remove event",openingHoursInvalidEventText:"Invalid event. No start or end time",openingHoursEditorCategoriesConfig:'[{"title":"\\u00c5bent","color":"#B3DC6C"},{"title":"Telefontid","color":"#FBE983"},{"title":"Borgerservice","color":"lightblue"}]',openingHoursBranchIdConfig:"12",initialDate:new Date("2024-03-25"),openingHoursEventFormCategoryText:"Opening hour",openingHoursEventFormStartTimeText:"Start time",openingHoursEventFormEndTimeText:"End time",openingHoursEventFormSubmitText:"Submit",openingHoursEventFormRepeatedText:"Repeat opening hour weekly every @weekDayName from @startDate",openingHoursEventFormEndDateText:"End date",openingHoursEventFormStartDateText:"Start date",openingHoursEventFormEveryWeekdayText:"Every",openingHoursConfirmAddRepeatedText:"Do you want to add this repeated opening hour?",openingHoursConfirmAddRepeatedCancelText:"Cancel",openingHoursConfirmRepeatedSubmitText:"I'm sure",openingHoursRepeatedIconAltText:"Repeated opening hour",openingHoursEditEventConfirmOptionThisText:"Only this instance",openingHoursEditEventConfirmOptionAllText:"This and future instances",openingHoursRemoveEventTitleText:"Remove opening hour",openingHoursEditEventTitleText:"Edit opening hour"}};Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...serviceUrlArgs,\n    openingHoursRemoveEventButtonText: "Remove event",\n    openingHoursInvalidEventText: "Invalid event. No start or end time",\n    openingHoursEditorCategoriesConfig: \'[{"title":"\\\\u00c5bent","color":"#B3DC6C"},{"title":"Telefontid","color":"#FBE983"},{"title":"Borgerservice","color":"lightblue"}]\',\n    openingHoursBranchIdConfig: "12",\n    initialDate: new Date("2024-03-25"),\n    openingHoursEventFormCategoryText: "Opening hour",\n    openingHoursEventFormStartTimeText: "Start time",\n    openingHoursEventFormEndTimeText: "End time",\n    openingHoursEventFormSubmitText: "Submit",\n    openingHoursEventFormRepeatedText: "Repeat opening hour weekly every @weekDayName from @startDate",\n    openingHoursEventFormEndDateText: "End date",\n    openingHoursEventFormStartDateText: "Start date",\n    openingHoursEventFormEveryWeekdayText: "Every",\n    openingHoursConfirmAddRepeatedText: "Do you want to add this repeated opening hour?",\n    openingHoursConfirmAddRepeatedCancelText: "Cancel",\n    openingHoursConfirmRepeatedSubmitText: "I\'m sure",\n    openingHoursRepeatedIconAltText: "Repeated opening hour",\n    openingHoursEditEventConfirmOptionThisText: "Only this instance",\n    openingHoursEditEventConfirmOptionAllText: "This and future instances",\n    openingHoursRemoveEventTitleText: "Remove opening hour",\n    openingHoursEditEventTitleText: "Edit opening hour"\n  }\n}',...Primary.parameters?.docs?.source}}}},"./src/components/dialog/Dialog.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>dialog_Dialog});var react=__webpack_require__("./node_modules/react/index.js"),clsx=__webpack_require__("./node_modules/clsx/dist/clsx.mjs"),icon_cross=__webpack_require__("./node_modules/@danskernesdigitalebibliotek/dpl-design-system/build/icons/basic/icon-cross.svg"),icon_cross_default=__webpack_require__.n(icon_cross);const useEscapeKey=({closeDialog})=>{(0,react.useEffect)((()=>{const handleKeyDown=e=>{"Escape"===e.key&&closeDialog()};return document.addEventListener("keydown",handleKeyDown),()=>{document.removeEventListener("keydown",handleKeyDown)}}),[closeDialog])},dialog_useEscapeKey=useEscapeKey;try{useEscapeKey.displayName="useEscapeKey",useEscapeKey.__docgenInfo={description:"",displayName:"useEscapeKey",props:{closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/dialog/useEscapeKey.tsx#useEscapeKey"]={docgenInfo:useEscapeKey.__docgenInfo,name:"useEscapeKey",path:"src/components/dialog/useEscapeKey.tsx#useEscapeKey"})}catch(__react_docgen_typescript_loader_error){}const Dialog=(0,react.forwardRef)((({children,closeDialog,isSidebar},ref)=>(dialog_useEscapeKey({closeDialog}),react.createElement("dialog",{className:(0,clsx.A)("dialog",{"dialog--sidebar":isSidebar}),ref,onClick:({currentTarget,target})=>{currentTarget===target&&closeDialog()}},react.createElement("button",{type:"button",onClick:closeDialog,className:"dialog__close-button"},react.createElement("img",{src:icon_cross_default(),alt:"","aria-label":"Close dialog"})),children)))),dialog_Dialog=Dialog;try{Dialog.displayName="Dialog",Dialog.__docgenInfo={description:"",displayName:"Dialog",props:{closeDialog:{defaultValue:null,description:"",name:"closeDialog",required:!0,type:{name:"() => void"}},isSidebar:{defaultValue:null,description:"",name:"isSidebar",required:!1,type:{name:"boolean | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/dialog/Dialog.tsx#Dialog"]={docgenInfo:Dialog.__docgenInfo,name:"Dialog",path:"src/components/dialog/Dialog.tsx#Dialog"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/dialog/useDialog.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const useDialog=({onClose}={})=>{const[dialogContent,setDialogContent]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),dialogRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);return{dialogContent,dialogRef,openDialogWithContent:content=>{var _dialogRef$current;setDialogContent(content),null===(_dialogRef$current=dialogRef.current)||void 0===_dialogRef$current||_dialogRef$current.showModal()},closeDialog:()=>{dialogRef.current&&(onClose&&onClose(),dialogRef.current.close())}}},__WEBPACK_DEFAULT_EXPORT__=useDialog;try{useDialog.displayName="useDialog",useDialog.__docgenInfo={description:"",displayName:"useDialog",props:{onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"(() => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/dialog/useDialog.tsx#useDialog"]={docgenInfo:useDialog.__docgenInfo,name:"useDialog",path:"src/components/dialog/useDialog.tsx#useDialog"})}catch(__react_docgen_typescript_loader_error){}},"./src/core/dpl-cms/dpl-cms.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J0:()=>getDplOpeningHoursListGETQueryKey,Fg:()=>useCampaignMatchPOST,hi:()=>useDplOpeningHoursCreatePOST,v2:()=>useDplOpeningHoursDeleteDELETE,Dp:()=>useDplOpeningHoursListGET,I1:()=>useDplOpeningHoursUpdatePATCH,vS:()=>useProxyUrlGET});var es=__webpack_require__("./node_modules/react-query/es/index.js"),FetchFailedError=__webpack_require__("./src/core/fetchers/FetchFailedError.ts"),helpers=__webpack_require__("./src/core/fetchers/helpers.ts"),core_token=__webpack_require__("./src/core/token.js"),extractServiceBaseUrls=__webpack_require__("./src/core/utils/reduxMiddleware/extractServiceBaseUrls.ts"),FetcherHttpError=__webpack_require__("./src/core/fetchers/FetcherHttpError.ts");function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}class DplCmsServiceHttpError extends FetcherHttpError.A{constructor(...args){super(...args),_defineProperty(this,"name","DplCmsServiceHttpError")}}const fetcher_fetcher=async({url,method,headers,params,data})=>{const token=(0,core_token.gf)(core_token.CI)??(0,core_token.gf)(core_token._L),authHeaders=token?{Authorization:`Bearer ${token}`}:{},body=data?JSON.stringify(data):null,serviceUrl=(0,helpers.Z4)({baseUrl:(0,extractServiceBaseUrls.aW)(extractServiceBaseUrls.TJ.dplCms),url,params});try{const response=await fetch(serviceUrl,{method,headers:{...headers,...authHeaders},body});if(!response.ok)throw new DplCmsServiceHttpError(response.status,response.statusText,serviceUrl);try{return await response.json()}catch(e){if(!(e instanceof SyntaxError))throw e}}catch(error){if(error instanceof DplCmsServiceHttpError)throw error;const message=error instanceof Error?error.message:"Unknown error";throw new FetchFailedError.A(message,serviceUrl)}return null},getCampaignMatchPOSTMutationOptions=options=>{const{mutation:mutationOptions}=options??{};return{mutationFn:props=>{const{data,params}=props??{};return((campaignMatchPOSTBodyItem,params)=>fetcher_fetcher({url:"/dpl_campaign/match",method:"POST",headers:{"Content-Type":"application/json"},data:campaignMatchPOSTBodyItem,params}))(data,params)},...mutationOptions}},useCampaignMatchPOST=options=>{const mutationOptions=getCampaignMatchPOSTMutationOptions(options);return(0,es.useMutation)(mutationOptions)},getDplOpeningHoursCreatePOSTMutationOptions=options=>{const{mutation:mutationOptions}=options??{};return{mutationFn:props=>{const{data,params}=props??{};return((dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,params)=>fetcher_fetcher({url:"/api/v1/opening_hours",method:"POST",headers:{"Content-Type":"application/json"},data:dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,params}))(data,params)},...mutationOptions}},useDplOpeningHoursCreatePOST=options=>{const mutationOptions=getDplOpeningHoursCreatePOSTMutationOptions(options);return(0,es.useMutation)(mutationOptions)},getDplOpeningHoursListGETQueryKey=params=>["/api/v1/opening_hours",...params?[params]:[]],getDplOpeningHoursListGETQueryOptions=(params,queryOptions)=>({queryKey:(null==queryOptions?void 0:queryOptions.queryKey)??getDplOpeningHoursListGETQueryKey(params),queryFn:({signal})=>((params,signal)=>fetcher_fetcher({url:"/api/v1/opening_hours",method:"GET",params,signal}))(params,signal),...queryOptions}),useDplOpeningHoursListGET=(params,queryOptions)=>{const options=getDplOpeningHoursListGETQueryOptions(params,queryOptions),query=(0,es.useQuery)(options);return query.queryKey=options.queryKey,query},getDplOpeningHoursDeleteDELETEMutationOptions=options=>{const{mutation:mutationOptions}=options??{};return{mutationFn:props=>{const{id,params}=props??{};return((id,params)=>fetcher_fetcher({url:`/api/v1/opening_hours/${id}`,method:"DELETE",params}))(id,params)},...mutationOptions}},useDplOpeningHoursDeleteDELETE=options=>{const mutationOptions=getDplOpeningHoursDeleteDELETEMutationOptions(options);return(0,es.useMutation)(mutationOptions)},getDplOpeningHoursUpdatePATCHMutationOptions=options=>{const{mutation:mutationOptions}=options??{};return{mutationFn:props=>{const{id,data,params}=props??{};return((id,dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,params)=>fetcher_fetcher({url:`/api/v1/opening_hours/${id}`,method:"PATCH",headers:{"Content-Type":"application/json"},data:dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,params}))(id,data,params)},...mutationOptions}},useDplOpeningHoursUpdatePATCH=options=>{const mutationOptions=getDplOpeningHoursUpdatePATCHMutationOptions(options);return(0,es.useMutation)(mutationOptions)},getProxyUrlGETQueryOptions=(params,queryOptions)=>{const queryKey=(null==queryOptions?void 0:queryOptions.queryKey)??(params=>["/dpl-url-proxy",...params?[params]:[]])(params);return{queryKey,queryFn:({signal})=>((params,signal)=>fetcher_fetcher({url:"/dpl-url-proxy",method:"GET",params,signal}))(params,signal),...queryOptions}},useProxyUrlGET=(params,queryOptions)=>{const options=getProxyUrlGETQueryOptions(params,queryOptions),query=(0,es.useQuery)(options);return query.queryKey=options.queryKey,query}},"./src/core/storybook/serviceUrlArgs.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__,U:()=>argTypes});var _utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/core/utils/reduxMiddleware/extractServiceBaseUrls.ts"),process=__webpack_require__("./node_modules/process/browser.js");const argTypes={[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbs]:{description:"Base url for the FBS API",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://fbs-openplatform.dbc.dk"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.publizon]:{description:"Base url for the Publizon API",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://pubhub-openplatform.dbc.dk"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.dplCms]:{description:"Base url for the DPL CMS API",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://dpl-cms.docker"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.cover]:{description:"Base url for the cover service",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://cover.dandigbib.org"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.materialList]:{description:"Base url for the material list service",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://prod.materiallist.dandigbib.org"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbi]:{description:"Base url for the FBI API",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://fbi-api.dbc.dk/next-present/graphql"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbiLocal]:{description:"Base url for the FBI API (local inventory)",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://fbi-api.dbc.dk/next/graphql"}}},[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbiGlobal]:{description:"Base url for the FBI API (global inventory)",control:{type:"text"},table:{type:{summary:"text"},defaultValue:{summary:"https://fbi-api.dbc.dk/next-present/graphql"}}}},__WEBPACK_DEFAULT_EXPORT__={[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbs]:process.env.FBS_BASEURL??"https://fbs-openplatform.dbc.dk",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.publizon]:process.env.PUBLIZON_BASEURL??"https://pubhub-openplatform.dbc.dk",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.dplCms]:process.env.CMS_BASEURL??"https://dpl-cms.docker",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.cover]:"https://cover.dandigbib.org",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.materialList]:"https://prod.materiallist.dandigbib.org",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbi]:"https://fbi-api.dbc.dk/next-present/graphql",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbiLocal]:"https://fbi-api.dbc.dk/next/graphql",[_utils_reduxMiddleware_extractServiceBaseUrls__WEBPACK_IMPORTED_MODULE_0__.TJ.fbiGlobal]:"https://fbi-api.dbc.dk/next-present/graphql"}},"./src/core/utils/url.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ik:()=>useUrls,nU:()=>withUrls});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_store__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/core/store.ts"),_url_slice__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/core/url.slice.ts"),_helpers_url__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/core/utils/helpers/url.ts"),_withSuffix__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/core/utils/withSuffix.tsx");const useUrls=()=>{const{data}=(0,_store__WEBPACK_IMPORTED_MODULE_1__.d4)((state=>state.url)),urls=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>(0,_helpers_url__WEBPACK_IMPORTED_MODULE_4__.tP)(data)),[data]);return(name,returnFalseIfUndefined=!1)=>{if(returnFalseIfUndefined)return urls[name]||!1;if(!urls[name])throw new Error(`The url ${name} is not defined`);return urls[name]}},withUrls=Component=>(0,_withSuffix__WEBPACK_IMPORTED_MODULE_3__.A)(Component,"Url",_url_slice__WEBPACK_IMPORTED_MODULE_2__.hx);try{withUrls.displayName="withUrls",withUrls.__docgenInfo={description:"",displayName:"withUrls",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/utils/url.tsx#withUrls"]={docgenInfo:withUrls.__docgenInfo,name:"withUrls",path:"src/core/utils/url.tsx#withUrls"})}catch(__react_docgen_typescript_loader_error){}}}]);