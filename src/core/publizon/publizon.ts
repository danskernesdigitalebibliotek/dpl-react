/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Publizon Library API
 * Pubhub exists in two separate environments, each with their own server, code and database. Please use the web service located at library-api.qa.pubhub.dk when developing and testing.
Orders/loans created in test environment will not be invoiced. Please request a new license key for the production environment when you're ready to go live.
 * OpenAPI spec version: 1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "react-query";
import type {
  FriendlyCardResult,
  ApiResult,
  ChecklistResult,
  LibraryProfile,
  LoanListResult,
  GetV1UserLoansParams,
  LoanResult,
  CreateLoanResult,
  PostV1UserLoansIdentifierParams,
  LoanStatusResult,
  LoanStatusListResult,
  ProductResult,
  ProductListResult,
  ReservationListResult,
  ReservationInput
} from "./model";
import { fetcher, ErrorType, BodyType } from "./mutator/fetcher";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Sample **request**:
            
    GET /friendly
    {
        "name": "Some name"
    }
 * @summary Gets the user's friendly card number.
 */
export const getV1UserCardnumberFriendly = (signal?: AbortSignal) => {
  return fetcher<FriendlyCardResult[]>({
    url: `/v1/user/cardnumber/friendly`,
    method: "get",
    signal
  });
};

export const getGetV1UserCardnumberFriendlyQueryKey = () => [
  `/v1/user/cardnumber/friendly`
];

export type GetV1UserCardnumberFriendlyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1UserCardnumberFriendly>>
>;
export type GetV1UserCardnumberFriendlyQueryError = ErrorType<ApiResult>;

export const useGetV1UserCardnumberFriendly = <
  TData = Awaited<ReturnType<typeof getV1UserCardnumberFriendly>>,
  TError = ErrorType<ApiResult>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV1UserCardnumberFriendly>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1UserCardnumberFriendlyQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1UserCardnumberFriendly>>
  > = ({ signal }) => getV1UserCardnumberFriendly(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1UserCardnumberFriendly>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary List all checklist items of the user.
 */
export const getV1UserChecklist = (signal?: AbortSignal) => {
  return fetcher<ChecklistResult>({
    url: `/v1/user/checklist`,
    method: "get",
    signal
  });
};

export const getGetV1UserChecklistQueryKey = () => [`/v1/user/checklist`];

export type GetV1UserChecklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1UserChecklist>>
>;
export type GetV1UserChecklistQueryError = ErrorType<unknown>;

export const useGetV1UserChecklist = <
  TData = Awaited<ReturnType<typeof getV1UserChecklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV1UserChecklist>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1UserChecklistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1UserChecklist>>
  > = ({ signal }) => getV1UserChecklist(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1UserChecklist>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Add a book to the user's checklist.
 */
export const postV1UserChecklistIdentifier = (identifier: string) => {
  return fetcher<ApiResult>({
    url: `/v1/user/checklist/${identifier}`,
    method: "post"
  });
};

export type PostV1UserChecklistIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserChecklistIdentifier>>
>;

export type PostV1UserChecklistIdentifierMutationError = ErrorType<unknown>;

export const usePostV1UserChecklistIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserChecklistIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserChecklistIdentifier>>,
    { identifier: string }
  > = (props) => {
    const { identifier } = props ?? {};

    return postV1UserChecklistIdentifier(identifier);
  };

  return useMutation<
    Awaited<ReturnType<typeof postV1UserChecklistIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Delete a book from the user's checklist.
 */
export const deleteV1UserChecklistIdentifier = (identifier: string) => {
  return fetcher<ApiResult>({
    url: `/v1/user/checklist/${identifier}`,
    method: "delete"
  });
};

export type DeleteV1UserChecklistIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1UserChecklistIdentifier>>
>;

export type DeleteV1UserChecklistIdentifierMutationError = ErrorType<unknown>;

export const useDeleteV1UserChecklistIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1UserChecklistIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1UserChecklistIdentifier>>,
    { identifier: string }
  > = (props) => {
    const { identifier } = props ?? {};

    return deleteV1UserChecklistIdentifier(identifier);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteV1UserChecklistIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >(mutationFn, mutationOptions);
};

export const getV1LibraryProfile = (signal?: AbortSignal) => {
  return fetcher<LibraryProfile>({
    url: `/v1/library/profile`,
    method: "get",
    signal
  });
};

export const getGetV1LibraryProfileQueryKey = () => [`/v1/library/profile`];

export type GetV1LibraryProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1LibraryProfile>>
>;
export type GetV1LibraryProfileQueryError = ErrorType<unknown>;

export const useGetV1LibraryProfile = <
  TData = Awaited<ReturnType<typeof getV1LibraryProfile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV1LibraryProfile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1LibraryProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1LibraryProfile>>
  > = ({ signal }) => getV1LibraryProfile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1LibraryProfile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Lists all active loans of the user.
 */
export const getV1UserLoans = (
  params?: GetV1UserLoansParams,
  signal?: AbortSignal
) => {
  return fetcher<LoanListResult>({
    url: `/v1/user/loans`,
    method: "get",
    signal,
    params
  });
};

export const getGetV1UserLoansQueryKey = (params?: GetV1UserLoansParams) => [
  `/v1/user/loans`,
  ...(params ? [params] : [])
];

export type GetV1UserLoansQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1UserLoans>>
>;
export type GetV1UserLoansQueryError = ErrorType<unknown>;

export const useGetV1UserLoans = <
  TData = Awaited<ReturnType<typeof getV1UserLoans>>,
  TError = ErrorType<unknown>
>(
  params?: GetV1UserLoansParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1UserLoans>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1UserLoansQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1UserLoans>>> = ({
    signal
  }) => getV1UserLoans(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1UserLoans>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Gets details of a specific loan.
 */
export const getV1UserLoansIdentifier = (
  identifier: string,
  signal?: AbortSignal
) => {
  return fetcher<LoanResult>({
    url: `/v1/user/loans/${identifier}`,
    method: "get",
    signal
  });
};

export const getGetV1UserLoansIdentifierQueryKey = (identifier: string) => [
  `/v1/user/loans/${identifier}`
];

export type GetV1UserLoansIdentifierQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1UserLoansIdentifier>>
>;
export type GetV1UserLoansIdentifierQueryError = ErrorType<unknown>;

export const useGetV1UserLoansIdentifier = <
  TData = Awaited<ReturnType<typeof getV1UserLoansIdentifier>>,
  TError = ErrorType<unknown>
>(
  identifier: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1UserLoansIdentifier>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1UserLoansIdentifierQueryKey(identifier);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1UserLoansIdentifier>>
  > = ({ signal }) => getV1UserLoansIdentifier(identifier, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1UserLoansIdentifier>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Creates a new loan.
 */
export const postV1UserLoansIdentifier = (
  identifier: string,
  params?: PostV1UserLoansIdentifierParams
) => {
  return fetcher<CreateLoanResult>({
    url: `/v1/user/loans/${identifier}`,
    method: "post",
    params
  });
};

export type PostV1UserLoansIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserLoansIdentifier>>
>;

export type PostV1UserLoansIdentifierMutationError = ErrorType<unknown>;

export const usePostV1UserLoansIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserLoansIdentifier>>,
    TError,
    { identifier: string; params?: PostV1UserLoansIdentifierParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserLoansIdentifier>>,
    { identifier: string; params?: PostV1UserLoansIdentifierParams }
  > = (props) => {
    const { identifier, params } = props ?? {};

    return postV1UserLoansIdentifier(identifier, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postV1UserLoansIdentifier>>,
    TError,
    { identifier: string; params?: PostV1UserLoansIdentifierParams },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Get loan status of a specific product.
 */
export const getV1LoanstatusIdentifier = (
  identifier: string,
  signal?: AbortSignal
) => {
  return fetcher<LoanStatusResult>({
    url: `/v1/loanstatus/${identifier}`,
    method: "get",
    signal
  });
};

export const getGetV1LoanstatusIdentifierQueryKey = (identifier: string) => [
  `/v1/loanstatus/${identifier}`
];

export type GetV1LoanstatusIdentifierQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1LoanstatusIdentifier>>
>;
export type GetV1LoanstatusIdentifierQueryError = ErrorType<unknown>;

export const useGetV1LoanstatusIdentifier = <
  TData = Awaited<ReturnType<typeof getV1LoanstatusIdentifier>>,
  TError = ErrorType<unknown>
>(
  identifier: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1LoanstatusIdentifier>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1LoanstatusIdentifierQueryKey(identifier);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1LoanstatusIdentifier>>
  > = ({ signal }) => getV1LoanstatusIdentifier(identifier, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1LoanstatusIdentifier>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Get loan status of all products.
 */
export const postV1Loanstatus = (postV1LoanstatusBody: string[]) => {
  return fetcher<LoanStatusListResult>({
    url: `/v1/loanstatus`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: postV1LoanstatusBody
  });
};

export type PostV1LoanstatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Loanstatus>>
>;
export type PostV1LoanstatusMutationBody = BodyType<string[]>;
export type PostV1LoanstatusMutationError = ErrorType<unknown>;

export const usePostV1Loanstatus = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Loanstatus>>,
    TError,
    { data: BodyType<string[]> },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1Loanstatus>>,
    { data: BodyType<string[]> }
  > = (props) => {
    const { data } = props ?? {};

    return postV1Loanstatus(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postV1Loanstatus>>,
    TError,
    { data: BodyType<string[]> },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Get a specific product.
 */
export const getV1ProductsIdentifier = (
  identifier: string,
  signal?: AbortSignal
) => {
  return fetcher<ProductResult>({
    url: `/v1/products/${identifier}`,
    method: "get",
    signal
  });
};

export const getGetV1ProductsIdentifierQueryKey = (identifier: string) => [
  `/v1/products/${identifier}`
];

export type GetV1ProductsIdentifierQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1ProductsIdentifier>>
>;
export type GetV1ProductsIdentifierQueryError = ErrorType<unknown>;

export const useGetV1ProductsIdentifier = <
  TData = Awaited<ReturnType<typeof getV1ProductsIdentifier>>,
  TError = ErrorType<unknown>
>(
  identifier: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getV1ProductsIdentifier>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV1ProductsIdentifierQueryKey(identifier);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1ProductsIdentifier>>
  > = ({ signal }) => getV1ProductsIdentifier(identifier, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1ProductsIdentifier>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary List all products.
 */
export const getV1Products = (signal?: AbortSignal) => {
  return fetcher<ProductListResult>({
    url: `/v1/products`,
    method: "get",
    signal
  });
};

export const getGetV1ProductsQueryKey = () => [`/v1/products`];

export type GetV1ProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1Products>>
>;
export type GetV1ProductsQueryError = ErrorType<unknown>;

export const useGetV1Products = <
  TData = Awaited<ReturnType<typeof getV1Products>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV1Products>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1ProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1Products>>> = ({
    signal
  }) => getV1Products(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1Products>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Lists all reservations of the user.
 */
export const getV1UserReservations = (signal?: AbortSignal) => {
  return fetcher<ReservationListResult>({
    url: `/v1/user/reservations`,
    method: "get",
    signal
  });
};

export const getGetV1UserReservationsQueryKey = () => [`/v1/user/reservations`];

export type GetV1UserReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV1UserReservations>>
>;
export type GetV1UserReservationsQueryError = ErrorType<unknown>;

export const useGetV1UserReservations = <
  TData = Awaited<ReturnType<typeof getV1UserReservations>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getV1UserReservations>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetV1UserReservationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV1UserReservations>>
  > = ({ signal }) => getV1UserReservations(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getV1UserReservations>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Creates a new reservation.
 */
export const postV1UserReservationsIdentifier = (
  identifier: string,
  reservationInput: BodyType<ReservationInput>
) => {
  return fetcher<ApiResult>({
    url: `/v1/user/reservations/${identifier}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: reservationInput
  });
};

export type PostV1UserReservationsIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserReservationsIdentifier>>
>;
export type PostV1UserReservationsIdentifierMutationBody =
  BodyType<ReservationInput>;
export type PostV1UserReservationsIdentifierMutationError = ErrorType<unknown>;

export const usePostV1UserReservationsIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserReservationsIdentifier>>,
    TError,
    { identifier: string; data: BodyType<ReservationInput> },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserReservationsIdentifier>>,
    { identifier: string; data: BodyType<ReservationInput> }
  > = (props) => {
    const { identifier, data } = props ?? {};

    return postV1UserReservationsIdentifier(identifier, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postV1UserReservationsIdentifier>>,
    TError,
    { identifier: string; data: BodyType<ReservationInput> },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Updates the phone number and email address of a specific reservation.
 */
export const patchV1UserReservationsIdentifier = (
  identifier: string,
  reservationInput: BodyType<ReservationInput>
) => {
  return fetcher<ApiResult>({
    url: `/v1/user/reservations/${identifier}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: reservationInput
  });
};

export type PatchV1UserReservationsIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchV1UserReservationsIdentifier>>
>;
export type PatchV1UserReservationsIdentifierMutationBody =
  BodyType<ReservationInput>;
export type PatchV1UserReservationsIdentifierMutationError = ErrorType<unknown>;

export const usePatchV1UserReservationsIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchV1UserReservationsIdentifier>>,
    TError,
    { identifier: string; data: BodyType<ReservationInput> },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchV1UserReservationsIdentifier>>,
    { identifier: string; data: BodyType<ReservationInput> }
  > = (props) => {
    const { identifier, data } = props ?? {};

    return patchV1UserReservationsIdentifier(identifier, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof patchV1UserReservationsIdentifier>>,
    TError,
    { identifier: string; data: BodyType<ReservationInput> },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Cancels a reservation.
 */
export const deleteV1UserReservationsIdentifier = (identifier: string) => {
  return fetcher<ApiResult>({
    url: `/v1/user/reservations/${identifier}`,
    method: "delete"
  });
};

export type DeleteV1UserReservationsIdentifierMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteV1UserReservationsIdentifier>>
>;

export type DeleteV1UserReservationsIdentifierMutationError =
  ErrorType<unknown>;

export const useDeleteV1UserReservationsIdentifier = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteV1UserReservationsIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteV1UserReservationsIdentifier>>,
    { identifier: string }
  > = (props) => {
    const { identifier } = props ?? {};

    return deleteV1UserReservationsIdentifier(identifier);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteV1UserReservationsIdentifier>>,
    TError,
    { identifier: string },
    TContext
  >(mutationFn, mutationOptions);
};
