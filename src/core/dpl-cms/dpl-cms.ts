/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DPL CMS - REST API
 * The REST API provide by the core REST module.
 * OpenAPI spec version: Versioning not supported
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "react-query";
import type {
  CampaignMatchPOST200,
  CampaignMatchPOSTBodyItem,
  CampaignMatchPOSTParams,
  DplOpeningHoursListGET200Item,
  DplOpeningHoursListGETParams,
  EventPATCHBody,
  EventPATCHParams,
  EventsGET200Item,
  EventsGETParams,
  ProxyUrlGET200,
  ProxyUrlGETParams
} from "./model";
import { fetcher, ErrorType, BodyType } from "./mutator/fetcher";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Hent kampagne som matcher facetter fra s√∏geresultatet
 */
export const campaignMatchPOST = (
  campaignMatchPOSTBodyItem: CampaignMatchPOSTBodyItem[],
  params?: CampaignMatchPOSTParams
) => {
  return fetcher<CampaignMatchPOST200>({
    url: `/dpl_campaign/match`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: campaignMatchPOSTBodyItem,
    params
  });
};

export type CampaignMatchPOSTMutationResult = NonNullable<
  Awaited<ReturnType<typeof campaignMatchPOST>>
>;
export type CampaignMatchPOSTMutationBody = BodyType<
  CampaignMatchPOSTBodyItem[]
>;
export type CampaignMatchPOSTMutationError = ErrorType<void>;

export const useCampaignMatchPOST = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return campaignMatchPOST(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary List all opening hours
 */
export const dplOpeningHoursListGET = (
  params?: DplOpeningHoursListGETParams,
  signal?: AbortSignal
) => {
  return fetcher<DplOpeningHoursListGET200Item[]>({
    url: `/dpl_opening_hours`,
    method: "get",
    signal,
    params
  });
};

export const getDplOpeningHoursListGETQueryKey = (
  params?: DplOpeningHoursListGETParams
) => [`/dpl_opening_hours`, ...(params ? [params] : [])];

export type DplOpeningHoursListGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof dplOpeningHoursListGET>>
>;
export type DplOpeningHoursListGETQueryError = ErrorType<void>;

export const useDplOpeningHoursListGET = <
  TData = Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
  TError = ErrorType<void>
>(
  params?: DplOpeningHoursListGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDplOpeningHoursListGETQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dplOpeningHoursListGET>>
  > = ({ signal }) => dplOpeningHoursListGET(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Update single events
 */
export const eventPATCH = (
  uuid: string,
  eventPATCHBody: BodyType<EventPATCHBody>,
  params?: EventPATCHParams
) => {
  return fetcher<void>({
    url: `/dpl_event/${uuid}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: eventPATCHBody,
    params
  });
};

export type EventPATCHMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventPATCH>>
>;
export type EventPATCHMutationBody = BodyType<EventPATCHBody>;
export type EventPATCHMutationError = ErrorType<unknown>;

export const useEventPATCH = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventPATCH>>,
    TError,
    { uuid: string; data: BodyType<EventPATCHBody>; params?: EventPATCHParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventPATCH>>,
    { uuid: string; data: BodyType<EventPATCHBody>; params?: EventPATCHParams }
  > = (props) => {
    const { uuid, data, params } = props ?? {};

    return eventPATCH(uuid, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof eventPATCH>>,
    TError,
    { uuid: string; data: BodyType<EventPATCHBody>; params?: EventPATCHParams },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Retrieve all events
 */
export const eventsGET = (params?: EventsGETParams, signal?: AbortSignal) => {
  return fetcher<EventsGET200Item[]>({
    url: `/dpl_event`,
    method: "get",
    signal,
    params
  });
};

export const getEventsGETQueryKey = (params?: EventsGETParams) => [
  `/dpl_event`,
  ...(params ? [params] : [])
];

export type EventsGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventsGET>>
>;
export type EventsGETQueryError = ErrorType<void>;

export const useEventsGET = <
  TData = Awaited<ReturnType<typeof eventsGET>>,
  TError = ErrorType<void>
>(
  params?: EventsGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventsGET>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEventsGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsGET>>> = ({
    signal
  }) => eventsGET(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof eventsGET>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query
  };
};

/**
 * @summary Generate proxy URL / Generer proxy URL
 */
export const proxyUrlGET = (
  params?: ProxyUrlGETParams,
  signal?: AbortSignal
) => {
  return fetcher<ProxyUrlGET200>({
    url: `/dpl-url-proxy`,
    method: "get",
    signal,
    params
  });
};

export const getProxyUrlGETQueryKey = (params?: ProxyUrlGETParams) => [
  `/dpl-url-proxy`,
  ...(params ? [params] : [])
];

export type ProxyUrlGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof proxyUrlGET>>
>;
export type ProxyUrlGETQueryError = ErrorType<void>;

export const useProxyUrlGET = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params?: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryKey = queryOptions?.queryKey ?? getProxyUrlGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proxyUrlGET>>> = ({
    signal
  }) => proxyUrlGET(params);

  const query = useQuery<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};
