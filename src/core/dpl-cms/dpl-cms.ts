/**
 * Generated by orval v6.18.1 🍺
 * Do not edit manually.
 * DPL CMS - REST API
 * The REST API provide by the core REST module.
 * OpenAPI spec version: Versioning not supported
 */
import { useQuery, useMutation } from "react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "react-query";
import type {
  CampaignMatchPOST200,
  CampaignMatchPOSTBodyItem,
  CampaignMatchPOSTParams,
  ProxyUrlGET200,
  ProxyUrlGETParams
} from "./model";
import { fetcher } from "./mutator/fetcher";
import type { ErrorType, BodyType } from "./mutator/fetcher";

/**
 * @summary Get campaign matching search result facets
 */
export const campaignMatchPOST = (
  campaignMatchPOSTBodyItem: CampaignMatchPOSTBodyItem[],
  params: CampaignMatchPOSTParams
) => {
  return fetcher<CampaignMatchPOST200>({
    url: `/dpl_campaign/match`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: campaignMatchPOSTBodyItem,
    params
  });
};

export const getCampaignMatchPOSTMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof campaignMatchPOST>>,
  TError,
  {
    data: BodyType<CampaignMatchPOSTBodyItem[]>;
    params: CampaignMatchPOSTParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return campaignMatchPOST(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CampaignMatchPOSTMutationResult = NonNullable<
  Awaited<ReturnType<typeof campaignMatchPOST>>
>;
export type CampaignMatchPOSTMutationBody = BodyType<
  CampaignMatchPOSTBodyItem[]
>;
export type CampaignMatchPOSTMutationError = ErrorType<void>;

/**
 * @summary Get campaign matching search result facets
 */
export const useCampaignMatchPOST = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    },
    TContext
  >;
}) => {
  const mutationOptions = getCampaignMatchPOSTMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Generate proxy url
 */
export const proxyUrlGET = (
  params: ProxyUrlGETParams,
  signal?: AbortSignal
) => {
  return fetcher<ProxyUrlGET200>({
    url: `/dpl-url-proxy`,
    method: "get",
    params,
    signal
  });
};

export const getProxyUrlGETQueryKey = (params: ProxyUrlGETParams) => {
  return [`/dpl-url-proxy`, ...(params ? [params] : [])] as const;
};

export const getProxyUrlGETQueryOptions = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
) => {
  const queryKey = queryOptions?.queryKey ?? getProxyUrlGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proxyUrlGET>>> = ({
    signal
  }) => proxyUrlGET(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProxyUrlGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof proxyUrlGET>>
>;
export type ProxyUrlGETQueryError = ErrorType<void>;

/**
 * @summary Generate proxy url
 */
export const useProxyUrlGET = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const options = getProxyUrlGETQueryOptions(params, queryOptions);

  const query = useQuery(options) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = options.queryKey;

  return query;
};
