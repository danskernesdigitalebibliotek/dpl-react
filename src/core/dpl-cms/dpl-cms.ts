/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DPL CMS - REST API
 * The REST API provide by the core REST module.
 * OpenAPI spec version: Versioning not supported
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from "react-query";
import type {
  CampaignMatchPOST200,
  CampaignMatchPOSTBodyItem,
  CampaignMatchPOSTParams,
  ProxyUrlGET200,
  ProxyUrlGETParams
} from "./model";
import { fetcher, ErrorType, BodyType } from "./mutator/fetcher";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Get campaign matching search result facets
 */
export const campaignMatchPOST = (
  campaignMatchPOSTBodyItem: CampaignMatchPOSTBodyItem[],
  params?: CampaignMatchPOSTParams
) => {
  return fetcher<CampaignMatchPOST200>({
    url: `/dpl_campaign/match`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: campaignMatchPOSTBodyItem,
    params
  });
};

export type CampaignMatchPOSTMutationResult = NonNullable<
  Awaited<ReturnType<typeof campaignMatchPOST>>
>;
export type CampaignMatchPOSTMutationBody = BodyType<
  CampaignMatchPOSTBodyItem[]
>;
export type CampaignMatchPOSTMutationError = ErrorType<void>;

export const useCampaignMatchPOST = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return campaignMatchPOST(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params?: CampaignMatchPOSTParams;
    },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Generate proxy url
 */
export const proxyUrlGET = (
  params?: ProxyUrlGETParams,
  signal?: AbortSignal
) => {
  return fetcher<ProxyUrlGET200>({
    url: `/dpl-url-proxy`,
    method: "get",
    signal,
    params
  });
};

export const getProxyUrlGETQueryKey = (params?: ProxyUrlGETParams) => [
  `/dpl-url-proxy`,
  ...(params ? [params] : [])
];

export type ProxyUrlGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof proxyUrlGET>>
>;
export type ProxyUrlGETQueryError = ErrorType<void>;

export const useProxyUrlGET = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params?: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryKey = queryOptions?.queryKey ?? getProxyUrlGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proxyUrlGET>>> = ({
    signal
  }) => proxyUrlGET(params);

  const query = useQuery<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};
