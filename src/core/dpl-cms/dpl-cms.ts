/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * DPL CMS - REST API
 * The REST API provide by the core REST module.
 * OpenAPI spec version: Versioning not supported
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from "react-query";
import type {
  CampaignMatchPOST200,
  CampaignMatchPOSTBodyItem,
  CampaignMatchPOSTParams,
  DplOpeningHoursCreatePOST200Item,
  DplOpeningHoursCreatePOSTOpeningHoursInstanceBody,
  DplOpeningHoursCreatePOSTParams,
  DplOpeningHoursDeleteDELETEParams,
  DplOpeningHoursListGET200Item,
  DplOpeningHoursListGETParams,
  DplOpeningHoursUpdatePATCH200Item,
  DplOpeningHoursUpdatePATCHParams,
  EventPATCHBody,
  EventPATCHParams,
  EventsGET200Item,
  EventsGETParams,
  ProxyUrlGET200,
  ProxyUrlGETParams
} from "./model";
import { fetcher } from "./mutator/fetcher";
import type { ErrorType, BodyType } from "./mutator/fetcher";

/**
 * @summary Get campaign matching search result facets
 */
export const campaignMatchPOST = (
  campaignMatchPOSTBodyItem: BodyType<CampaignMatchPOSTBodyItem[]>,
  params: CampaignMatchPOSTParams
) => {
  return fetcher<CampaignMatchPOST200>({
    url: `/dpl_campaign/match`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: campaignMatchPOSTBodyItem,
    params
  });
};

export const getCampaignMatchPOSTMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof campaignMatchPOST>>,
  TError,
  {
    data: BodyType<CampaignMatchPOSTBodyItem[]>;
    params: CampaignMatchPOSTParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return campaignMatchPOST(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CampaignMatchPOSTMutationResult = NonNullable<
  Awaited<ReturnType<typeof campaignMatchPOST>>
>;
export type CampaignMatchPOSTMutationBody = BodyType<
  CampaignMatchPOSTBodyItem[]
>;
export type CampaignMatchPOSTMutationError = ErrorType<void>;

/**
 * @summary Get campaign matching search result facets
 */
export const useCampaignMatchPOST = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof campaignMatchPOST>>,
    TError,
    {
      data: BodyType<CampaignMatchPOSTBodyItem[]>;
      params: CampaignMatchPOSTParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof campaignMatchPOST>>,
  TError,
  {
    data: BodyType<CampaignMatchPOSTBodyItem[]>;
    params: CampaignMatchPOSTParams;
  },
  TContext
> => {
  const mutationOptions = getCampaignMatchPOSTMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Create individual opening hours
 */
export const dplOpeningHoursCreatePOST = (
  dplOpeningHoursCreatePOSTOpeningHoursInstanceBody: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>,
  params: DplOpeningHoursCreatePOSTParams
) => {
  return fetcher<DplOpeningHoursCreatePOST200Item[]>({
    url: `/dpl_opening_hours`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,
    params
  });
};

export const getDplOpeningHoursCreatePOSTMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>,
    TError,
    {
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursCreatePOSTParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>,
  TError,
  {
    data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
    params: DplOpeningHoursCreatePOSTParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>,
    {
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursCreatePOSTParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return dplOpeningHoursCreatePOST(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DplOpeningHoursCreatePOSTMutationResult = NonNullable<
  Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>
>;
export type DplOpeningHoursCreatePOSTMutationBody =
  BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
export type DplOpeningHoursCreatePOSTMutationError = ErrorType<void>;

/**
 * @summary Create individual opening hours
 */
export const useDplOpeningHoursCreatePOST = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>,
    TError,
    {
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursCreatePOSTParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof dplOpeningHoursCreatePOST>>,
  TError,
  {
    data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
    params: DplOpeningHoursCreatePOSTParams;
  },
  TContext
> => {
  const mutationOptions = getDplOpeningHoursCreatePOSTMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary List all opening hours
 */
export const dplOpeningHoursListGET = (
  params: DplOpeningHoursListGETParams,
  signal?: AbortSignal
) => {
  return fetcher<DplOpeningHoursListGET200Item[]>({
    url: `/dpl_opening_hours`,
    method: "GET",
    params,
    signal
  });
};

export const getDplOpeningHoursListGETQueryKey = (
  params: DplOpeningHoursListGETParams
) => {
  return [`/dpl_opening_hours`, ...(params ? [params] : [])] as const;
};

export const getDplOpeningHoursListGETQueryOptions = <
  TData = Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
  TError = ErrorType<void>
>(
  params: DplOpeningHoursListGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDplOpeningHoursListGETQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dplOpeningHoursListGET>>
  > = ({ signal }) => dplOpeningHoursListGET(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DplOpeningHoursListGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof dplOpeningHoursListGET>>
>;
export type DplOpeningHoursListGETQueryError = ErrorType<void>;

/**
 * @summary List all opening hours
 */
export const useDplOpeningHoursListGET = <
  TData = Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
  TError = ErrorType<void>
>(
  params: DplOpeningHoursListGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dplOpeningHoursListGET>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDplOpeningHoursListGETQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Delete individual opening hours
 */
export const dplOpeningHoursDeleteDELETE = (
  id: string,
  params: DplOpeningHoursDeleteDELETEParams
) => {
  return fetcher<void>({
    url: `/dpl_opening_hours/${id}`,
    method: "DELETE",
    params
  });
};

export const getDplOpeningHoursDeleteDELETEMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>,
    TError,
    { id: string; params: DplOpeningHoursDeleteDELETEParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>,
  TError,
  { id: string; params: DplOpeningHoursDeleteDELETEParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>,
    { id: string; params: DplOpeningHoursDeleteDELETEParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return dplOpeningHoursDeleteDELETE(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DplOpeningHoursDeleteDELETEMutationResult = NonNullable<
  Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>
>;

export type DplOpeningHoursDeleteDELETEMutationError = ErrorType<void>;

/**
 * @summary Delete individual opening hours
 */
export const useDplOpeningHoursDeleteDELETE = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>,
    TError,
    { id: string; params: DplOpeningHoursDeleteDELETEParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof dplOpeningHoursDeleteDELETE>>,
  TError,
  { id: string; params: DplOpeningHoursDeleteDELETEParams },
  TContext
> => {
  const mutationOptions =
    getDplOpeningHoursDeleteDELETEMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update individual opening hours
 */
export const dplOpeningHoursUpdatePATCH = (
  id: string,
  dplOpeningHoursCreatePOSTOpeningHoursInstanceBody: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>,
  params: DplOpeningHoursUpdatePATCHParams
) => {
  return fetcher<DplOpeningHoursUpdatePATCH200Item[]>({
    url: `/dpl_opening_hours/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: dplOpeningHoursCreatePOSTOpeningHoursInstanceBody,
    params
  });
};

export const getDplOpeningHoursUpdatePATCHMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>,
    TError,
    {
      id: string;
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursUpdatePATCHParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>,
  TError,
  {
    id: string;
    data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
    params: DplOpeningHoursUpdatePATCHParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>,
    {
      id: string;
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursUpdatePATCHParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return dplOpeningHoursUpdatePATCH(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DplOpeningHoursUpdatePATCHMutationResult = NonNullable<
  Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>
>;
export type DplOpeningHoursUpdatePATCHMutationBody =
  BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
export type DplOpeningHoursUpdatePATCHMutationError = ErrorType<void>;

/**
 * @summary Update individual opening hours
 */
export const useDplOpeningHoursUpdatePATCH = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>,
    TError,
    {
      id: string;
      data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
      params: DplOpeningHoursUpdatePATCHParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof dplOpeningHoursUpdatePATCH>>,
  TError,
  {
    id: string;
    data: BodyType<DplOpeningHoursCreatePOSTOpeningHoursInstanceBody>;
    params: DplOpeningHoursUpdatePATCHParams;
  },
  TContext
> => {
  const mutationOptions = getDplOpeningHoursUpdatePATCHMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update single events
 */
export const eventPATCH = (
  uuid: string,
  eventPATCHBody: BodyType<EventPATCHBody>,
  params: EventPATCHParams
) => {
  return fetcher<void>({
    url: `/api/v1/events/${uuid}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: eventPATCHBody,
    params
  });
};

export const getEventPATCHMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventPATCH>>,
    TError,
    { uuid: string; data: BodyType<EventPATCHBody>; params: EventPATCHParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof eventPATCH>>,
  TError,
  { uuid: string; data: BodyType<EventPATCHBody>; params: EventPATCHParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eventPATCH>>,
    { uuid: string; data: BodyType<EventPATCHBody>; params: EventPATCHParams }
  > = (props) => {
    const { uuid, data, params } = props ?? {};

    return eventPATCH(uuid, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type EventPATCHMutationResult = NonNullable<
  Awaited<ReturnType<typeof eventPATCH>>
>;
export type EventPATCHMutationBody = BodyType<EventPATCHBody>;
export type EventPATCHMutationError = ErrorType<void>;

/**
 * @summary Update single events
 */
export const useEventPATCH = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eventPATCH>>,
    TError,
    { uuid: string; data: BodyType<EventPATCHBody>; params: EventPATCHParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof eventPATCH>>,
  TError,
  { uuid: string; data: BodyType<EventPATCHBody>; params: EventPATCHParams },
  TContext
> => {
  const mutationOptions = getEventPATCHMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Retrieve all events
 */
export const eventsGET = (params: EventsGETParams, signal?: AbortSignal) => {
  return fetcher<EventsGET200Item[]>({
    url: `/api/v1/events`,
    method: "GET",
    params,
    signal
  });
};

export const getEventsGETQueryKey = (params: EventsGETParams) => {
  return [`/api/v1/events`, ...(params ? [params] : [])] as const;
};

export const getEventsGETQueryOptions = <
  TData = Awaited<ReturnType<typeof eventsGET>>,
  TError = ErrorType<void>
>(
  params: EventsGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventsGET>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEventsGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsGET>>> = ({
    signal
  }) => eventsGET(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof eventsGET>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type EventsGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof eventsGET>>
>;
export type EventsGETQueryError = ErrorType<void>;

/**
 * @summary Retrieve all events
 */
export const useEventsGET = <
  TData = Awaited<ReturnType<typeof eventsGET>>,
  TError = ErrorType<void>
>(
  params: EventsGETParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof eventsGET>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEventsGETQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Generate proxy url
 */
export const proxyUrlGET = (
  params: ProxyUrlGETParams,
  signal?: AbortSignal
) => {
  return fetcher<ProxyUrlGET200>({
    url: `/dpl-url-proxy`,
    method: "GET",
    params,
    signal
  });
};

export const getProxyUrlGETQueryKey = (params: ProxyUrlGETParams) => {
  return [`/dpl-url-proxy`, ...(params ? [params] : [])] as const;
};

export const getProxyUrlGETQueryOptions = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
) => {
  const queryKey = queryOptions?.queryKey ?? getProxyUrlGETQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof proxyUrlGET>>> = ({
    signal
  }) => proxyUrlGET(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProxyUrlGETQueryResult = NonNullable<
  Awaited<ReturnType<typeof proxyUrlGET>>
>;
export type ProxyUrlGETQueryError = ErrorType<void>;

/**
 * @summary Generate proxy url
 */
export const useProxyUrlGET = <
  TData = Awaited<ReturnType<typeof proxyUrlGET>>,
  TError = ErrorType<void>
>(
  params: ProxyUrlGETParams,
  queryOptions?: UseQueryOptions<
    Awaited<ReturnType<typeof proxyUrlGET>>,
    TError,
    TData
  >
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const options = getProxyUrlGETQueryOptions(params, queryOptions);

  const query = useQuery(options) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = options.queryKey;

  return query;
};
