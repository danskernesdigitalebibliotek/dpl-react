/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * DDF Cover Service
 * This service provides covers for library materials indexed by isbn, issn, faust, pid.
The service is provided by [Det Digitale Folkebibliotek](https://detdigitalefolkebibliotek.dk/section/i-brug-paa-biblioteket/cover-service)
### Authentication notes
Authentication is done via OAuth2 against auth.dbc.dk. To obtain a valid token follow the instructions here: [Open Platform](https://openplatform.dbc.dk/v3/). To use the "Authorize" option in this tool use your 'client_id' and 'client_secret' and fill in '@agency' (e.g. '@123456') for both username and password.
 * OpenAPI spec version: 2.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from "react-query";
import type { Cover, GetCoverCollectionParams } from "./model";
import { fetcher, ErrorType, BodyType } from "./mutator/fetcher";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Get covers by identifier in specific image format(s), specific image size(s) and with or without generic covers.
 * @summary Search multiple covers
 */
export const getCoverCollection = (
  params?: GetCoverCollectionParams,
  signal?: AbortSignal
) => {
  return fetcher<Cover[]>({
    url: `/api/v2/covers`,
    method: "get",
    signal,
    params
  });
};

export const getGetCoverCollectionQueryKey = (
  params?: GetCoverCollectionParams
) => [`/api/v2/covers`, ...(params ? [params] : [])];

export type GetCoverCollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCoverCollection>>
>;
export type GetCoverCollectionQueryError = ErrorType<void>;

export const useGetCoverCollection = <
  TData = Awaited<ReturnType<typeof getCoverCollection>>,
  TError = ErrorType<void>
>(
  params?: GetCoverCollectionParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCoverCollection>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCoverCollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCoverCollection>>
  > = ({ signal }) => getCoverCollection(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getCoverCollection>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query
  };
};
